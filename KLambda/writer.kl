"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun pr (V15800 V15801) (trap-error (shen.prh V15800 V15801 0) (lambda E V15800)))

(defun shen.prh (V15805 V15806 V15807) (shen.prh V15805 V15806 (shen.write-char-and-inc V15805 V15806 V15807)))

(defun shen.write-char-and-inc (V15811 V15812 V15813) (do (write-byte (string->n (pos V15811 V15813)) V15812) (+ V15813 1)))

(defun print (V15815) (let String (shen.insert V15815 "~S") (let Print (shen.prhush String (stoutput)) V15815)))

(defun shen.prhush (V15818 V15819) (if (value *hush*) V15818 (pr V15818 V15819)))

(defun shen.mkstr (V15822 V15823) (cond ((string? V15822) (shen.mkstr-l (shen.proc-nl V15822) V15823)) (true (shen.mkstr-r (cons shen.proc-nl (cons V15822 ())) V15823))))

(defun shen.mkstr-l (V15826 V15827) (cond ((= () V15827) V15826) ((cons? V15827) (shen.mkstr-l (shen.insert-l (hd V15827) V15826) (tl V15827))) (true (shen.f_error shen.mkstr-l))))

(defun shen.insert-l (V15832 V15833) (cond ((= "" V15833) "") ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "A" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.a ()))))) ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "R" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.r ()))))) ((and (shen.+string? V15833) (and (= "~" (pos V15833 0)) (and (shen.+string? (tlstr V15833)) (= "S" (pos (tlstr V15833) 0))))) (cons shen.app (cons V15832 (cons (tlstr (tlstr V15833)) (cons shen.s ()))))) ((shen.+string? V15833) (shen.factor-cn (cons cn (cons (pos V15833 0) (cons (shen.insert-l V15832 (tlstr V15833)) ()))))) ((and (cons? V15833) (and (= cn (hd V15833)) (and (cons? (tl V15833)) (and (cons? (tl (tl V15833))) (= () (tl (tl (tl V15833)))))))) (cons cn (cons (hd (tl V15833)) (cons (shen.insert-l V15832 (hd (tl (tl V15833)))) ())))) ((and (cons? V15833) (and (= shen.app (hd V15833)) (and (cons? (tl V15833)) (and (cons? (tl (tl V15833))) (and (cons? (tl (tl (tl V15833)))) (= () (tl (tl (tl (tl V15833)))))))))) (cons shen.app (cons (hd (tl V15833)) (cons (shen.insert-l V15832 (hd (tl (tl V15833)))) (tl (tl (tl V15833))))))) (true (shen.f_error shen.insert-l))))

(defun shen.factor-cn (V15835) (cond ((and (cons? V15835) (and (= cn (hd V15835)) (and (cons? (tl V15835)) (and (cons? (tl (tl V15835))) (and (cons? (hd (tl (tl V15835)))) (and (= cn (hd (hd (tl (tl V15835))))) (and (cons? (tl (hd (tl (tl V15835))))) (and (cons? (tl (tl (hd (tl (tl V15835)))))) (and (= () (tl (tl (tl (hd (tl (tl V15835))))))) (and (= () (tl (tl (tl V15835)))) (and (string? (hd (tl V15835))) (string? (hd (tl (hd (tl (tl V15835))))))))))))))))) (cons cn (cons (cn (hd (tl V15835)) (hd (tl (hd (tl (tl V15835)))))) (tl (tl (hd (tl (tl V15835)))))))) (true V15835)))

(defun shen.proc-nl (V15837) (cond ((= "" V15837) "") ((and (shen.+string? V15837) (and (= "~" (pos V15837 0)) (and (shen.+string? (tlstr V15837)) (= "%" (pos (tlstr V15837) 0))))) (cn (n->string 10) (shen.proc-nl (tlstr (tlstr V15837))))) ((shen.+string? V15837) (cn (pos V15837 0) (shen.proc-nl (tlstr V15837)))) (true (shen.f_error shen.proc-nl))))

(defun shen.mkstr-r (V15840 V15841) (cond ((= () V15841) V15840) ((cons? V15841) (shen.mkstr-r (cons shen.insert (cons (hd V15841) (cons V15840 ()))) (tl V15841))) (true (shen.f_error shen.mkstr-r))))

(defun shen.insert (V15844 V15845) (shen.insert-h V15844 V15845 ""))

(defun shen.insert-h (V15851 V15852 V15853) (cond ((= "" V15852) V15853) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "A" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.a))) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "R" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.r))) ((and (shen.+string? V15852) (and (= "~" (pos V15852 0)) (and (shen.+string? (tlstr V15852)) (= "S" (pos (tlstr V15852) 0))))) (cn V15853 (shen.app V15851 (tlstr (tlstr V15852)) shen.s))) ((shen.+string? V15852) (shen.insert-h V15851 (tlstr V15852) (cn V15853 (pos V15852 0)))) (true (shen.f_error shen.insert-h))))

(defun shen.app (V15857 V15858 V15859) (cn (shen.arg->str V15857 V15859) V15858))

(defun shen.arg->str (V15867 V15868) (cond ((= V15867 (fail)) "...") ((shen.list? V15867) (shen.list->str V15867 V15868)) ((string? V15867) (shen.str->str V15867 V15868)) ((absvector? V15867) (shen.vector->str V15867 V15868)) (true (shen.atom->str V15867))))

(defun shen.list->str (V15871 V15872) (cond ((= shen.r V15872) (@s "(" (@s (shen.iter-list V15871 shen.r (shen.maxseq)) ")"))) (true (@s "[" (@s (shen.iter-list V15871 V15872 (shen.maxseq)) "]")))))

(defun shen.maxseq () (value *maximum-print-sequence-size*))

(defun shen.iter-list (V15886 V15887 V15888) (cond ((= () V15886) "") ((= 0 V15888) "... etc") ((and (cons? V15886) (= () (tl V15886))) (shen.arg->str (hd V15886) V15887)) ((cons? V15886) (@s (shen.arg->str (hd V15886) V15887) (@s " " (shen.iter-list (tl V15886) V15887 (- V15888 1))))) (true (@s "|" (@s " " (shen.arg->str V15886 V15887))))))

(defun shen.str->str (V15895 V15896) (cond ((= shen.a V15896) V15895) (true (@s (n->string 34) (@s V15895 (n->string 34))))))

(defun shen.vector->str (V15899 V15900) (if (shen.print-vector? V15899) ((function (<-address V15899 0)) V15899) (if (vector? V15899) (@s "<" (@s (shen.iter-vector V15899 1 V15900 (shen.maxseq)) ">")) (@s "<" (@s "<" (@s (shen.iter-vector V15899 0 V15900 (shen.maxseq)) ">>"))))))

(defun shen.print-vector? (V15902) (let Zero (<-address V15902 0) (if (= Zero shen.tuple) true (if (= Zero shen.pvar) true (if (not (number? Zero)) (shen.fbound? Zero) false)))))

(defun shen.fbound? (V15904) (trap-error (do (ps V15904) true) (lambda E false)))

(defun shen.tuple (V15906) (cn "(@p " (shen.app (<-address V15906 1) (cn " " (shen.app (<-address V15906 2) ")" shen.s)) shen.s)))

(defun shen.iter-vector (V15917 V15918 V15919 V15920) (cond ((= 0 V15920) "... etc") (true (let Item (trap-error (<-address V15917 V15918) (lambda E shen.out-of-bounds)) (let Next (trap-error (<-address V15917 (+ V15918 1)) (lambda E shen.out-of-bounds)) (if (= Item shen.out-of-bounds) "" (if (= Next shen.out-of-bounds) (shen.arg->str Item V15919) (@s (shen.arg->str Item V15919) (@s " " (shen.iter-vector V15917 (+ V15918 1) V15919 (- V15920 1)))))))))))

(defun shen.atom->str (V15922) (trap-error (str V15922) (lambda E (shen.funexstring))))

(defun shen.funexstring () (@s "" (@s "f" (@s "u" (@s "n" (@s "e" (@s (shen.arg->str (gensym (intern "x")) shen.a) "")))))))

(defun shen.list? (V15924) (or (empty? V15924) (cons? V15924)))



