"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V15926) (cond ((and (cons? V15926) (and (= defcc (hd V15926)) (cons? (tl V15926)))) (shen.yacc->shen (hd (tl V15926)) (tl (tl V15926)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V15929 V15930) (let CCRules (shen.split_cc_rules true V15930 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V15929 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V15932) (cond ((> (occurrences kill V15932) 0) (cons trap-error (cons V15932 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V15932)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V15934) (let String (error-to-string V15934) (if (= String "yacc kill") (fail) V15934)))

(defun shen.split_cc_rules (V15940 V15941 V15942) (cond ((and (= () V15941) (= () V15942)) ()) ((= () V15941) (cons (shen.split_cc_rule V15940 (reverse V15942) ()) ())) ((and (cons? V15941) (= ; (hd V15941))) (cons (shen.split_cc_rule V15940 (reverse V15942) ()) (shen.split_cc_rules V15940 (tl V15941) ()))) ((cons? V15941) (shen.split_cc_rules V15940 (tl V15941) (cons (hd V15941) V15942))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V15950 V15951 V15952) (cond ((and (cons? V15951) (and (= := (hd V15951)) (and (cons? (tl V15951)) (= () (tl (tl V15951)))))) (cons (reverse V15952) (tl V15951))) ((and (cons? V15951) (and (= := (hd V15951)) (and (cons? (tl V15951)) (and (cons? (tl (tl V15951))) (and (= where (hd (tl (tl V15951)))) (and (cons? (tl (tl (tl V15951)))) (= () (tl (tl (tl (tl V15951))))))))))) (cons (reverse V15952) (cons (cons where (cons (hd (tl (tl (tl V15951)))) (cons (hd (tl V15951)) ()))) ()))) ((= () V15951) (do (shen.semantic-completion-warning V15950 V15952) (shen.split_cc_rule V15950 (cons := (cons (shen.default_semantics (reverse V15952)) ())) V15952))) ((cons? V15951) (shen.split_cc_rule V15950 (tl V15951) (cons (hd V15951) V15952))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V15963 V15964) (cond ((= true V15963) (do (shen.prhush "warning: " (stoutput)) (do (map (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V15964)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V15966) (cond ((= () V15966) ()) ((and (cons? V15966) (and (= () (tl V15966)) (shen.grammar_symbol? (hd V15966)))) (hd V15966)) ((and (cons? V15966) (shen.grammar_symbol? (hd V15966))) (cons append (cons (hd V15966) (cons (shen.default_semantics (tl V15966)) ())))) ((cons? V15966) (cons cons (cons (hd V15966) (cons (shen.default_semantics (tl V15966)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V15968) (and (symbol? V15968) (let Cs (shen.strip-pathname (explode V15968)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V15970) (cond ((and (cons? V15970) (= () (tl V15970))) (hd V15970)) ((cons? V15970) (let P YaccParse (cons let (cons P (cons (hd V15970) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V15970)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V15972) (cond ((and (cons? V15972) (and (cons? (tl V15972)) (= () (tl (tl V15972))))) (shen.syntax (hd V15972) Stream (hd (tl V15972)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V15976 V15977 V15978) (cond ((and (= () V15976) (and (cons? V15978) (and (= where (hd V15978)) (and (cons? (tl V15978)) (and (cons? (tl (tl V15978))) (= () (tl (tl (tl V15978))))))))) (cons if (cons (shen.semantics (hd (tl V15978))) (cons (cons shen.pair (cons (cons hd (cons V15977 ())) (cons (shen.semantics (hd (tl (tl V15978)))) ()))) (cons (cons fail ()) ()))))) ((= () V15976) (cons shen.pair (cons (cons hd (cons V15977 ())) (cons (shen.semantics V15978) ())))) ((cons? V15976) (if (shen.grammar_symbol? (hd V15976)) (shen.recursive_descent V15976 V15977 V15978) (if (variable? (hd V15976)) (shen.variable-match V15976 V15977 V15978) (if (shen.jump_stream? (hd V15976)) (shen.jump_stream V15976 V15977 V15978) (if (shen.terminal? (hd V15976)) (shen.check_stream V15976 V15977 V15978) (if (cons? (hd V15976)) (shen.list-stream (shen.decons (hd V15976)) (tl V15976) V15977 V15978) (simple-error (shen.app (hd V15976) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V15983 V15984 V15985 V15986) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V15985 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V15985 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V15984 (cons shen.pair (cons (cons tl (cons (cons hd (cons V15985 ())) ())) (cons (cons hd (cons (cons tl (cons V15985 ())) ())) ()))) V15986) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V15983 (cons shen.pair (cons (cons hd (cons (cons hd (cons V15985 ())) ())) (cons (cons hd (cons (cons tl (cons V15985 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V15988) (cond ((and (cons? V15988) (and (= cons (hd V15988)) (and (cons? (tl V15988)) (and (cons? (tl (tl V15988))) (and (= () (hd (tl (tl V15988)))) (= () (tl (tl (tl V15988))))))))) (cons (hd (tl V15988)) ())) ((and (cons? V15988) (and (= cons (hd V15988)) (and (cons? (tl V15988)) (and (cons? (tl (tl V15988))) (= () (tl (tl (tl V15988)))))))) (cons (hd (tl V15988)) (shen.decons (hd (tl (tl V15988)))))) (true V15988)))

(defun shen.insert-runon (V16003 V16004 V16005) (cond ((and (cons? V16005) (and (= shen.pair (hd V16005)) (and (cons? (tl V16005)) (and (cons? (tl (tl V16005))) (and (= () (tl (tl (tl V16005)))) (= (hd (tl (tl V16005))) V16004)))))) V16003) ((cons? V16005) (map (lambda Z (shen.insert-runon V16003 V16004 Z)) V16005)) (true V16005)))

(defun shen.strip-pathname (V16011) (cond ((not (element? "." V16011)) V16011) ((cons? V16011) (shen.strip-pathname (tl V16011))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V16015 V16016 V16017) (cond ((cons? V16015) (let Test (cons (hd V16015) (cons V16016 ())) (let Action (shen.syntax (tl V16015) (concat Parse_ (hd V16015)) V16017) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V16015)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V16015)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V16021 V16022 V16023) (cond ((cons? V16021) (let Test (cons cons? (cons (cons hd (cons V16022 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V16021)) (cons (cons hd (cons (cons hd (cons V16022 ())) ())) (cons (shen.syntax (tl V16021) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16022 ())) ())) (cons (cons shen.hdtl (cons V16022 ())) ()))) V16023) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V16033) (cond ((cons? V16033) false) ((variable? V16033) false) (true true)))

(defun shen.jump_stream? (V16039) (cond ((= V16039 _) true) (true false)))

(defun shen.check_stream (V16043 V16044 V16045) (cond ((cons? V16043) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V16044 ())) ())) (cons (cons = (cons (hd V16043) (cons (cons hd (cons (cons hd (cons V16044 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V16043) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16044 ())) ())) (cons (cons shen.hdtl (cons V16044 ())) ()))) V16045) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V16049 V16050 V16051) (cond ((cons? V16049) (let Test (cons cons? (cons (cons hd (cons V16050 ())) ())) (let Action (shen.syntax (tl V16049) (cons shen.pair (cons (cons tl (cons (cons hd (cons V16050 ())) ())) (cons (cons shen.hdtl (cons V16050 ())) ()))) V16051) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V16053) (cond ((= () V16053) ()) ((shen.grammar_symbol? V16053) (cons shen.hdtl (cons (concat Parse_ V16053) ()))) ((variable? V16053) (concat Parse_ V16053)) ((cons? V16053) (map (lambda Z (shen.semantics Z)) V16053)) (true V16053)))

(defun shen.snd-or-fail (V16061) (cond ((and (cons? V16061) (and (cons? (tl V16061)) (= () (tl (tl V16061))))) (hd (tl V16061))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V16064 V16065) (cons V16064 (cons V16065 ())))

(defun shen.hdtl (V16067) (hd (tl V16067)))

(defun shen.<!> (V16075) (cond ((and (cons? V16075) (and (cons? (tl V16075)) (= () (tl (tl V16075))))) (cons () (cons (hd V16075) ()))) (true (fail))))

(defun <e> (V16081) (cond ((and (cons? V16081) (and (cons? (tl V16081)) (= () (tl (tl V16081))))) (cons (hd V16081) (cons () ()))) (true (shen.f_error <e>))))



