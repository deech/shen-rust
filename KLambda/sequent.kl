"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V14350) (cond ((and (cons? V14350) (and (cons? (tl V14350)) (= () (tl (tl V14350))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V14350)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V14352) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V14352) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14352) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V14354) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V14354) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V14354) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V14356) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V14356) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14356) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V14358) (let YaccParse (if (and (cons? (hd V14358)) (= if (hd (hd V14358)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V14358)) (shen.hdtl V14358))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V14358)) (= let (hd (hd V14358)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V14358)) (shen.hdtl V14358))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V14360) (if (cons? (hd V14360)) (let Parse_X (hd (hd V14360)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14360)) (shen.hdtl V14360))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V14362) (if (cons? (hd V14362)) (let Parse_X (hd (hd V14362)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V14362)) (shen.hdtl V14362))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V14364) (cond ((and (cons? V14364) (and (cons? (tl V14364)) (and (cons? (tl (tl V14364))) (and (= () (tl (tl (tl V14364)))) (= (hd (tl V14364)) bar!))))) (cons (hd V14364) (hd (tl (tl V14364))))) ((cons? V14364) (cons (shen.remove-bar (hd V14364)) (shen.remove-bar (tl V14364)))) (true V14364)))

(defun shen.<premises> (V14366) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V14366) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14366) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V14368) (if (cons? (hd V14368)) (let Parse_X (hd (hd V14368)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V14368)) (shen.hdtl V14368))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V14370) (let YaccParse (if (and (cons? (hd V14370)) (= ! (hd (hd V14370)))) (shen.pair (hd (shen.pair (tl (hd V14370)) (shen.hdtl V14370))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V14370) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V14370) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V14372) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V14372) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V14372) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V14375 V14376) (@p V14375 V14376))

(defun shen.<formulae> (V14378) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V14378) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V14378) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V14378) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V14380) (if (cons? (hd V14380)) (let Parse_X (hd (hd V14380)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V14380)) (shen.hdtl V14380))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V14382) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V14382) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V14382) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V14384) (let Parse_shen.<expr> (shen.<expr> V14384) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V14386) (if (cons? (hd V14386)) (let Parse_X (hd (hd V14386)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14386)) (shen.hdtl V14386))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V14388) (if (cons? (hd V14388)) (let Parse_X (hd (hd V14388)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V14388)) (shen.hdtl V14388))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V14390) (and (symbol? V14390) (shen.sh? (str V14390))))

(defun shen.sh? (V14392) (cond ((= "_" V14392) true) (true (and (= (pos V14392 0) "_") (shen.sh? (tlstr V14392))))))

(defun shen.doubleunderline? (V14394) (and (symbol? V14394) (shen.dh? (str V14394))))

(defun shen.dh? (V14396) (cond ((= "=" V14396) true) (true (and (= (pos V14396 0) "=") (shen.dh? (tlstr V14396))))))

(defun shen.process-datatype (V14399 V14400) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V14399 V14400))))

(defun shen.remember-datatype (V14406) (cond ((cons? V14406) (do (set shen.*datatypes* (adjoin (hd V14406) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V14406) (value shen.*alldatatypes*))) (hd V14406)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V14411 V14412) (cond ((= () V14412) ()) ((and (cons? V14412) (and (tuple? (hd V14412)) (= shen.single (fst (hd V14412))))) (cons (shen.rule->horn-clause V14411 (snd (hd V14412))) (shen.rules->horn-clauses V14411 (tl V14412)))) ((and (cons? V14412) (and (tuple? (hd V14412)) (= shen.double (fst (hd V14412))))) (shen.rules->horn-clauses V14411 (append (shen.double->singles (snd (hd V14412))) (tl V14412)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V14414) (cons (shen.right-rule V14414) (cons (shen.left-rule V14414) ())))

(defun shen.right-rule (V14416) (@p shen.single V14416))

(defun shen.left-rule (V14418) (cond ((and (cons? V14418) (and (cons? (tl V14418)) (and (cons? (tl (tl V14418))) (and (tuple? (hd (tl (tl V14418)))) (and (= () (fst (hd (tl (tl V14418))))) (= () (tl (tl (tl V14418))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V14418)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V14418))) Q) ()) (@p shen.single (cons (hd V14418) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V14424) (cond ((and (tuple? V14424) (= () (fst V14424))) (snd V14424)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V14427 V14428) (cond ((and (cons? V14428) (and (cons? (tl V14428)) (and (cons? (tl (tl V14428))) (and (tuple? (hd (tl (tl V14428)))) (= () (tl (tl (tl V14428)))))))) (cons (shen.rule->horn-clause-head V14427 (snd (hd (tl (tl V14428))))) (cons :- (cons (shen.rule->horn-clause-body (hd V14428) (hd (tl V14428)) (fst (hd (tl (tl V14428))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V14431 V14432) (cons V14431 (cons (shen.mode-ify V14432) (cons Context_1957 ()))))

(defun shen.mode-ify (V14434) (cond ((and (cons? V14434) (and (cons? (tl V14434)) (and (= : (hd (tl V14434))) (and (cons? (tl (tl V14434))) (= () (tl (tl (tl V14434)))))))) (cons mode (cons (cons (hd V14434) (cons : (cons (cons mode (cons (hd (tl (tl V14434))) (cons + ()))) ()))) (cons - ())))) (true V14434)))

(defun shen.rule->horn-clause-body (V14438 V14439 V14440) (let Variables (map (lambda X (shen.extract_vars X)) V14440) (let Predicates (map (lambda X (gensym shen.cl)) V14440) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V14440 Variables) (let SideLiterals (shen.construct-side-literals V14438) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V14440))) V14439) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V14449 V14450 V14451 V14452) (cond ((and (= () V14449) (= () V14450)) ()) (true (shen.csl-help V14449 V14450 V14451 V14452))))

(defun shen.csl-help (V14459 V14460 V14461 V14462) (cond ((and (= () V14459) (= () V14460)) (cons (cons bind (cons ContextOut_1957 (cons V14461 ()))) ())) ((and (cons? V14459) (cons? V14460)) (cons (cons (hd V14459) (cons V14461 (cons V14462 (hd V14460)))) (shen.csl-help (tl V14459) (tl V14460) V14462 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V14466 V14467 V14468) (cond ((and (= () V14466) (and (= () V14467) (= () V14468))) shen.skip) ((and (cons? V14466) (and (cons? V14467) (cons? V14468))) (do (shen.construct-search-clause (hd V14466) (hd V14467) (hd V14468)) (shen.construct-search-clauses (tl V14466) (tl V14467) (tl V14468)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V14472 V14473 V14474) (shen.s-prolog (cons (shen.construct-base-search-clause V14472 V14473 V14474) (cons (shen.construct-recursive-search-clause V14472 V14473 V14474) ()))))

(defun shen.construct-base-search-clause (V14478 V14479 V14480) (cons (cons V14478 (cons (cons (shen.mode-ify V14479) In_1957) (cons In_1957 V14480))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V14484 V14485 V14486) (cons (cons V14484 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V14486))) (cons :- (cons (cons (cons V14484 (cons Assumptions_1957 (cons Out_1957 V14486))) ()) ()))))

(defun shen.construct-side-literals (V14492) (cond ((= () V14492) ()) ((and (cons? V14492) (and (cons? (hd V14492)) (and (= if (hd (hd V14492))) (and (cons? (tl (hd V14492))) (= () (tl (tl (hd V14492)))))))) (cons (cons when (tl (hd V14492))) (shen.construct-side-literals (tl V14492)))) ((and (cons? V14492) (and (cons? (hd V14492)) (and (= let (hd (hd V14492))) (and (cons? (tl (hd V14492))) (and (cons? (tl (tl (hd V14492)))) (= () (tl (tl (tl (hd V14492)))))))))) (cons (cons is (tl (hd V14492))) (shen.construct-side-literals (tl V14492)))) ((cons? V14492) (shen.construct-side-literals (tl V14492))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V14499 V14500) (cond ((tuple? V14499) (cons shen.t* (cons (shen.recursive_cons_form (snd V14499)) (cons (shen.construct-context V14500 (fst V14499)) ())))) ((= ! V14499) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V14503 V14504) (cond ((and (= true V14503) (= () V14504)) Context_1957) ((and (= false V14503) (= () V14504)) ContextOut_1957) ((cons? V14504) (cons cons (cons (shen.recursive_cons_form (hd V14504)) (cons (shen.construct-context V14503 (tl V14504)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V14506) (cond ((cons? V14506) (cons cons (cons (shen.recursive_cons_form (hd V14506)) (cons (shen.recursive_cons_form (tl V14506)) ())))) (true V14506)))

(defun preclude (V14508) (shen.preclude-h (map (lambda X (shen.intern-type X)) V14508)))

(defun shen.preclude-h (V14510) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V14510)) (value shen.*datatypes*)))

(defun include (V14512) (shen.include-h (map (lambda X (shen.intern-type X)) V14512)))

(defun shen.include-h (V14514) (let ValidTypes (intersection V14514 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V14516) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V14516))))

(defun include-all-but (V14518) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V14518))))

(defun shen.synonyms-help (V14524) (cond ((= () V14524) (shen.demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V14524) (cons? (tl V14524))) (let Vs (difference (shen.extract_vars (hd (tl V14524))) (shen.extract_vars (hd V14524))) (if (empty? Vs) (do (shen.pushnew (cons (hd V14524) (cons (hd (tl V14524)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V14524)))) (shen.free_variable_warnings (hd (tl V14524)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V14527 V14528) (if (element? V14527 (value V14528)) (value V14528) (set V14528 (cons V14527 (value V14528)))))

(defun shen.demod-rule (V14530) (cond ((and (cons? V14530) (and (cons? (tl V14530)) (= () (tl (tl V14530))))) (cons (shen.rcons_form (hd V14530)) (cons -> (cons (shen.rcons_form (hd (tl V14530))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.demodulation-function (V14533 V14534) (do (tc -) (do (eval (cons define (cons shen.demod (append V14534 (shen.default-rule))))) (do (if V14533 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



